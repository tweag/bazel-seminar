"""
Defines rules to generate Go sources from a Swagger API specification.
"""

load("@bazel_skylib//lib:shell.bzl", "shell")

def _go_swagger_gen_impl(ctx):
    go_tool = ctx.toolchains["@io_bazel_rules_go//go:toolchain"].sdk.go
    substitutions = {
        "@@SWAGGER@@": shell.quote(ctx.executable._swagger.short_path),
        "@@GENERATED_MESSAGE@@": """
# Generated by {label}
# DO NOT EDIT
""".format(label = str(ctx.label)),
        "@@RUNNER_LABEL@@": shell.quote(str(ctx.label)),
        "@@GOTOOL@@": shell.quote(go_tool.path),
        "@@JSON_FILE@@": shell.quote(ctx.file.spec.short_path),
        "@@TARGET_DIR@@": shell.quote(ctx.build_file_path),
    }

    out_file = ctx.actions.declare_file(ctx.label.name + ".bash")

    ctx.actions.expand_template(
        template = ctx.file._template,
        output = out_file,
        substitutions = substitutions,
        is_executable = True,
    )
    runfiles = ctx.runfiles(files = [
        ctx.file.spec,
        ctx.executable._swagger,
        go_tool,
    ]).merge(
        ctx.attr._swagger[DefaultInfo].default_runfiles,
    )

    return [DefaultInfo(
        files = depset([out_file]),
        runfiles = runfiles,
        executable = out_file,
    )]

_go_swagger_gen = rule(
    implementation = _go_swagger_gen_impl,
    attrs = {
        "spec": attr.label(
            allow_single_file = [".json"],
        ),
        "_swagger": attr.label(
            default = Label("@go_swagger_tool//file"),
            allow_single_file = True,
            executable = True,
            cfg = "host",
        ),
        "_template": attr.label(
            default = "@polyglot//go:template.in",
            allow_single_file = True,
        ),
    },
    toolchains = ["@io_bazel_rules_go//go:toolchain"],
    executable = True,
)

def go_swagger_gen(name, **kwargs):
    _go_swagger_gen(
        name = name + "-gen",
        tags = ["manual"],
        **kwargs
    )
    native.sh_binary(
        name = name,
        srcs = [name + "-gen"],
        tags = ["manual"],
    )
